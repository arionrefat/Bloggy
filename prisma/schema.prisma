// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Likes[]
  createdBlogs  Blog[]    @relation("createdBlog")
  updatedBlogs  Blog[]    @relation("updatedBlog")
  comments      Comment[]
}

enum BlogVisibility {
  public
  private
}

model Blog {
  id            String         @id @default(cuid())
  title         String
  createdBy     String?
  description   String
  tags          String[]
  content       String
  likes         Likes[]
  updatedBy     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  image         String?
  visibility    BlogVisibility
  author        User?          @relation(fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "createdBlog")
  updater       User?          @relation(fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "updatedBlog")
  comments      Comment[]
  totalStarts   Int            @default(0)
  totalComments Int            @default(0)
}

model Likes {
  id     String @id @default(cuid())
  userId String
  blogId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  upvote    Int      @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
